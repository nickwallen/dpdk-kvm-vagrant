---
  # environment:
  #   RTE_SDK: "/opt/dpdk-{{ dpdk_version }}"
  #   RTE_TARGET: "{{ dpdk_target }}"

  - name: Install dependencies
    yum: name=* state=present
    with_items:
      - "@Development tools"
      - pciutils
      - net-tools

  #
  # install prerequisite packages and the latest kernel headers.  need to
  # ensure that the kernel headers match the current running kernel version.
  # if this is not the case, the DPDK build process will fail
  #
  - name: Install latest kernel headers and source
    yum: name={{ item }} state=latest
    with_items:
      - kernel
      - kernel-devel
      - kernel-headers

  #
  # DPDK requires specific kernel boot parameters.  set the params and reboot
  # the host, if the actual params differ from what is expected.
  #
  - set_fact:
      expected_kernel_params: "default_hugepagesz=1G hugepagesz=1G hugepages={{ num_huge_pages }} iommu=pt intel_iommu=on"

  - name: Check kernel boot parameters
    shell: "cat /proc/cmdline"
    register: actual_kernel_params

  - name: Alter kernel boot parameters
    lineinfile:
      dest: /etc/default/grub
      regexp:  '^(GRUB_CMDLINE_LINUX=\"[^\"]+)\"$'
      line: '\1 {{ expected_kernel_params }}"'
      backrefs: yes
    when: not expected_kernel_params in actual_kernel_params.stdout

  - name: Update grub with kernel boot parameters
    shell: /sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
    when: not expected_kernel_params in actual_kernel_params.stdout

  - name: Reboot to use new kernel boot parameters
    command: /sbin/reboot
    ignore_errors: true
    when: not expected_kernel_params in actual_kernel_params.stdout

  - name: Wait for reboot of '{{ ansible_hostname }}'
    local_action: wait_for state=started host={{ ansible_hostname }} port=22 timeout=30
    sudo: false
    when: not expected_kernel_params in actual_kernel_params.stdout

  - name: Install debug utilities
    yum: name=yum-utils state=present

  - name: Install debug symbols
    shell: debuginfo-install -y glibc
