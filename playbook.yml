---
- hosts: all
  sudo: yes

  environment:
    RTE_SDK: "/opt/dpdk-{{ dpdk_version }}"
    RTE_TARGET: "{{ dpdk_target }}"

  tasks:
    - name: Install development tools
      yum: name="@Development tools" state=present

    - name: Update all packages
      yum: name=* state=latest

    - name: Install prerequisites
      yum: name={{ item }} state=latest
      with_items:
        - kernel
        - kernel-devel
        - kernel-headers
        - pciutils
        - net-tools

    - set_fact:
        expected_kernel_params: "default_hugepagesz=1G hugepagesz=1G hugepages=16 iommu=pt intel_iommu=on"

    - name: Check kernel boot parameters
      shell: "cat /proc/cmdline"
      register: actual_kernel_params

    - name: Alter kernel boot parameters
      lineinfile:
        dest: /etc/default/grub
        regexp:  '^(GRUB_CMDLINE_LINUX=\"[^\"]+)\"$'
        line: '\1 {{ expected_kernel_params }}"'
        backrefs: yes
      when: not expected_kernel_params in actual_kernel_params.stdout

    - name: Update grub with kernel boot parameters
      shell: /sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
      when: not expected_kernel_params in actual_kernel_params.stdout

    - name: Reboot to use new kernel boot parameters
      command: /sbin/reboot
      ignore_errors: true
      when: not expected_kernel_params in actual_kernel_params.stdout

    #
    # TODO: need to extract ip from a variable somehow
    #
    - name: Wait for reboot
      local_action: wait_for state=started host=192.168.3.3 port=22 timeout=30
      sudo: false
      when: not expected_kernel_params in actual_kernel_params.stdout

    - name: Download DPDK-{{ dpdk_version }}
      unarchive:
        src: "http://dpdk.org/browse/dpdk/snapshot/dpdk-{{ dpdk_version }}.tar.gz"
        dest: "/opt"
        creates: "/opt/dpdk-{{ dpdk_version }}"
        copy: no

    #
    # the 'tools/setup.sh' script bundled with DPDK is very useful for setting
    # up the environment.  the script is driven by an interactive command
    # prompt.  the following values are used to drive the script.  these values
    # may change in future versions of DPDK (they have changed from past versions).
    #
    - set_fact:
        build_cmd: 9
        hugepage_cmd: 20
        insert_uio_cmd: 17
        bind_nic_cmd: 23
        exit_cmd: 34

    #
    # tools/setup.sh option [9] x86_64-ivshmem-linuxapp-gcc
    #
    - name: Build DPDK
      shell: "printf '{{ build_cmd }} \n \n {{ exit_cmd }} \n' | ./tools/setup.sh"
      args:
        chdir: "/opt/dpdk-{{ dpdk_version }}"
        creates: "/opt/dpdk-{{ dpdk_version }}/{{ dpdk_target }}"

    - name: Build DPDK kernel modules
      shell: EXTRA_CFLAGS="-g -Ofast" make -j10
      args:
        chdir: "/opt/dpdk-{{ dpdk_version }}/{{ dpdk_target }}"

    #
    # tools/setup.sh option [20] Setup hugepage mappings for non-NUMA systems
    #
    - name: Setup hugepage mappings
      shell: "printf '{{ hugepage_cmd }} \n {{ num_huge_pages }} \n \n {{ exit_cmd }} \n' | ./tools/setup.sh"
      args:
        chdir: "/opt/dpdk-{{ dpdk_version }}"

    #
    # tools/setup.sh option [17] Insert IGB UIO module
    #
    - name: Insert IGB UIO module
      shell: "printf '{{ insert_uio_cmd }} \n \n {{ exit_cmd }} \n' | ./tools/setup.sh"
      args:
        chdir: "/opt/dpdk-{{ dpdk_version }}"

    - name: Deactivate {{ dpdk_device }}
      shell: "ifconfig {{ dpdk_device }} down"
      ignore_errors: true

    - name: Discover PCI address of {{ dpdk_device }}
      shell: "/sbin/ethtool -i {{ dpdk_device }} | grep bus-info | awk '{print $2}'"
      register: pci

    #
    # tools/setup.sh option [23] Bind Ethernet device to IGB UIO module
    #
    - name: Bind device to IGB UIO module
      shell: "printf '{{ bind_nic_cmd }} \n {{ item }} \n \n {{ exit_cmd }}\n' | ./tools/setup.sh"
      args:
        chdir: "/opt/dpdk-{{ dpdk_version }}"
      with_items: pci.stdout_lines
